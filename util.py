import openai
from pptx import Presentation
from pptx.util import Cm
from pptx.util import Pt

import requests
import io
import json
import os 

openai.api_key = os.environ['OPENAI_API_KEY']

def generate_image_dalle(prompt):
    response = openai.Image.create(prompt=prompt, size="512x512")
    img_url = response["data"][0]["url"]
    img_bytes = requests.get(img_url).content
    return io.BytesIO(img_bytes)

def create_slide(prs, content, image_stream, font_choice, layout_choice, font_size, font_format):
    layout = prs.slide_layouts[3]
    slide = prs.slides.add_slide(layout)

    slide.shapes.title.text = content["title"]

    # Choose content placement based on image layout:
    if layout_choice == "Right":
        body_shape = slide.shapes.placeholders[1]  # Left column for text
        left = Cm(13)  # Image on the right
    else:
        body_shape = slide.shapes.placeholders[2]  # Right column for text
        left = Cm(1)   # Image on the left

    body_shape.text_frame.text = "\n".join(content["content"])

    for shape in slide.shapes:
        if not shape.has_text_frame:
            continue
        for paragraph in shape.text_frame.paragraphs:
            for run in paragraph.runs:
                font = run.font
                font.name = font_choice
                font.size = Pt(font_size)
                font.bold = 'Bold' in font_format
                font.italic = 'Italic' in font_format

    top, height = Cm(4.5), Cm(11)
    slide.shapes.add_picture(image_stream, left, top, height=height)

def add_title_slide(prs, topic, font_choice, font_size, font_format):
    title_layout = prs.slide_layouts[0]  # Using the first layout which is typically the title slide
    title_slide = prs.slides.add_slide(title_layout)
    title = title_slide.shapes.title
    subtitle = title_slide.placeholders[1]
    
    title.text = topic
    subtitle.text = "Generated by ChatPPT"

    # Apply font properties to title
    for run in title.text_frame.paragraphs[0].runs:
        font = run.font
        font.name = font_choice
        font.bold = 'Bold' in font_format
        font.italic = 'Italic' in font_format

    # Apply font properties to subtitle
    for run in subtitle.text_frame.paragraphs[0].runs:
        font = run.font
        font.name = font_choice
        font.bold = 'Bold' in font_format
        font.italic = 'Italic' in font_format

def add_table_of_contents(prs, contents, font_choice, font_size, font_format):
    toc_layout = prs.slide_layouts[1]  # Assuming a general layout, you can choose another layout if desired.
    toc_slide = prs.slides.add_slide(toc_layout)
    title = toc_slide.shapes.title
    title.text = "Table of Contents"
    
    # Font settings for title
    for run in title.text_frame.paragraphs[0].runs:
        font = run.font
        font.name = font_choice
        font.bold = 'Bold' in font_format
        font.italic = 'Italic' in font_format
    
    # Create list of content titles
    toc_content = "\n".join([content["title"] for content in contents])
    
    toc_shape = toc_slide.placeholders[1]
    toc_shape.text = toc_content
    
    # Font settings for TOC items
    for paragraph in toc_shape.text_frame.paragraphs:
        for run in paragraph.runs:
            font = run.font
            font.name = font_choice
            font.size = Pt(font_size - 2)  # Making TOC font slightly smaller for readability
            font.bold = 'Bold' in font_format
            font.italic = 'Italic' in font_format            

